project.ext.abiCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'x86':4, 'x86_64':5]

android { 
  defaultConfig {  
    minSdkVersion 19
    versionCode 216
    versionName "2.0.0"
    ndk {
      abiFilters.clear()
    }
  }
  lintOptions {
      checkReleaseBuilds false
      // Or, if you prefer, you can continue to check for errors in release builds,
      // but continue the build even when errors are found:
      abortOnError false
  }
  splits {
      abi {
          // enable gradle.startParameter.taskNames.contains("assembleRelease")  !project.hasProperty('dbgBld')
          enable project.hasProperty('splitEnabled')
          reset()
          include  'x86_64', 'arm64-v8a', 'armeabi-v7a'
          universalApk false
      }
  }
  aaptOptions {
    additionalParameters "--no-version-vectors"  
  }  
  buildTypes { // THIS CAUSES RELEASE MODE ERROR ON APP LAUNCH
    release {
      multiDexEnabled false
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled true

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

      // resConfigs "en", "fr", "es"

      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      def absolutePathToAppResources = getAppResourcesPath()
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        "$absolutePathToAppResources/Android/proguard-rules.pro"

      debuggable false
      jniDebuggable false
      renderscriptDebuggable false
    }
    debug {
      multiDexEnabled true
    }
  }
  // packagingOptions {
  //     exclude '/res/values-v21/<file_to_exclude>'
  // }
}
dependencies {

    implementation 'com.github.duanhong169:logger:1.0.0'
    implementation 'com.github.duanhong169:checkerboarddrawable:1.0.2'
    implementation 'com.github.duanhong169:colorpicker:1.1.6'
}

// final excludedModules = [
//     'bottomappbar','appbar','badge','bottomnavigation', 'circularreveal', 'floatingactionbutton','imageview', 'radiobutton', 'tabs', 'textview', 'textfield'
// ]
/**
 * Exclude dependencies from all configurations.
 * This configuration solves an issue 
 * when the same transitive dependency is included by different libraries.
 */
// configurations {
//     [all, excludedModules].combinations { config, moduleToExclude ->
//         config.exclude group: 'com.google.android.material', module: moduleToExclude
//     }
// }

task createProguard {
    dependsOn 'buildMetadata'
    doLast {
        exec {
            workingDir "$USER_PROJECT_ROOT"
            commandLine 'node', 'scripts/createProguard.js'
        }
    }
}
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter("ABI"), 0)
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
        }
    }
}